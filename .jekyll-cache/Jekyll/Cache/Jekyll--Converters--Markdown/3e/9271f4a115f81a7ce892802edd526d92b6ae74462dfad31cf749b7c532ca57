I"5<p><em>UPDATE: Jan 26, 2018: This post previously used the pep8 package and SublimeLinter-pep8, but both were renamed at the recommendation of Guido van Rossum (yes, the creator of Python himself). <a href="https://github.com/PyCQA/pycodestyle/issues/466">The discussion thread on Github</a> about PEP8 and the name of the linting tool is a fascinating example of the Python community at work.</em></p>

<p>For Django (and Python generally) PEP 8 lays out a number of useful style guidelines. You can commit these guidelines to memory, or you can find a ‚Äúlinter‚Äù for your text editor, and let it take care of remembering all the rules. Which option do you suppose is better? SublimeText 3 has a very convenient linter, <strong>SublimeLinter 3</strong> with a plug-in that instantly adds PEP 8 support. Here‚Äôs how to get up and running with PEP 8 linting in SublimeText right away.</p>

<h2 id="install-sublimelinter-3-and-sublimelinter-pycodestyle">Install SublimeLinter 3 and SublimeLinter-pycodestyle</h2>

<p>First, make sure you have SublimeText 3 and SublimeText 3 Package Control installed (see those links for installation instructions).</p>

<p>Next, we‚Äôll install the pycodestyle package, which includes the linter. install the package system-wide (that is, make sure you deactivate any active virtualenvs)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>pip <span class="nb">install </span>pycodestyle
</code></pre></div></div>

<p>Now, open SublimeText 3, and:</p>

<ol>
  <li>
    <p>Press <strong>ctrl + shift + P</strong> to open command prompt</p>
  </li>
  <li>
    <p>Find <strong>‚ÄòPackage Control: Install Package‚Äô</strong> and click it</p>
  </li>
  <li>
    <p>Search for <strong>SublimeLinter</strong> and click or press Enter to install</p>
  </li>
  <li>
    <p>Repeat Steps 1 and 2 and this time search for <strong>SublimeLinter-pycodestyle</strong>. Click or press Enter to install</p>
  </li>
</ol>

<p>Restart SublimeText and open a .py file. You should see red or yellow dots next to lines that violate the style guidelines. You should see thin red boxes around the exact area where the violation is occurring.</p>

<p>Click on a line with a red or yellow dot, and you will see an error description violation in the status bar at the bottom of the Sublime Text editor.</p>

<h2 id="change-maximum-line-length-to-100">Change Maximum Line Length to 100</h2>

<p>By default, PEP 8 has a 79-character line width restriction. For the purposes of my projects, 100 characters is an acceptable line width. I personally find that the 79 character width forces illogical line breaks that often makes code harder, not easier, to read.</p>

<p>To override the default settings, open the SublimeLinter settings file:</p>

<p>Preferences &gt; Package Settings &gt; SublimeLinter &gt; Settings</p>

<p>Then add the following inside of the ‚Äúdefault‚Äù object:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"linters"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"pycodestyle"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"max-line-length"</span><span class="p">:</span><span class="w"> </span><span class="mi">100</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
:ET